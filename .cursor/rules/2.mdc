---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Your rule content

- You can @ files here
- You can use markdown but dont have to
rule number o

# Hara Project Rules

## Project Structure
- All React components should be placed in `src/components/`
- Page components should be placed in `src/pages/`
- Context providers should be placed in `src/contexts/`
- Types and interfaces should be placed in `src/types/`
- Utility functions should be placed in `src/utils/`
- API calls should be placed in `src/api/`

## Naming Conventions
- React components: PascalCase (e.g., `BookmarkList.tsx`)
- Utility functions: camelCase (e.g., `formatDate.ts`)
- Context files: PascalCase with 'Context' suffix (e.g., `BookmarkContext.tsx`)
- Page components: PascalCase with 'Page' suffix (e.g., `HomePage.tsx`)

## Code Style
- Use TypeScript for all new files
- Prefer functional components over class components
- Use React hooks for state management
- Implement proper error boundaries
- Follow the DRY (Don't Repeat Yourself) principle

## Component Guidelines
- Each component should have a single responsibility
- Props should be properly typed with TypeScript interfaces
- Use proper prop validation
- Implement proper loading and error states
- Include JSDoc comments for complex components

## State Management
- Use React Context for global state
- Implement proper state persistence where needed
- Follow immutable state updates
- Use proper state initialization

## Performance Guidelines
- Implement proper code splitting
- Use React.memo() for expensive components
- Optimize images and assets
- Implement proper lazy loading
- Use proper caching strategies

## Testing Requirements
- Write unit tests for utility functions
- Write integration tests for complex components
- Implement E2E tests for critical user flows
- Maintain minimum 80% test coverage

## Documentation
- Include README updates for major changes
- Document complex business logic
- Keep API documentation up to date
- Include setup instructions for new features

## Git Workflow
- Use feature branches for new development
- Follow conventional commits
- Keep commits atomic and focused
- Write meaningful commit messages

## Security Guidelines
- Implement proper authentication
- Sanitize user inputs
- Use environment variables for sensitive data
- Follow OWASP security guidelines

## Accessibility
- Follow WCAG 2.1 guidelines
- Implement proper ARIA labels
- Ensure keyboard navigation
- Maintain proper color contrast

## Dependencies
- Keep dependencies up to date
- Use exact versions in package.json
- Regular security audits
- Document major dependency changes

## Build and Deployment
- Optimize build size
- Implement proper error tracking
- Use proper environment configurations
- Follow CI/CD best practices

## Monitoring
- Implement proper logging
- Use performance monitoring
- Track user analytics
- Monitor error rates

## Code Review Guidelines
- Review for security vulnerabilities
- Check for performance issues
- Ensure proper error handling
- Verify accessibility compliance
- Check for proper documentation

## Maintenance
- Regular dependency updates
- Performance optimization
- Security patches
- Code cleanup and refactoring

## Project-Specific Rules
- Follow the existing bookmark system architecture
- Maintain offline functionality
- Ensure proper data persistence
- Follow the established UI/UX patterns
